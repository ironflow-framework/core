{% extends 'layouts/app.twig' %}

{% block title %}Ajouter un média{% endblock %}

{% block head %}
    {{ parent() }}
    {% if config('vibe.uploader.use_dropzone', true) %}
        <link rel="stylesheet" href="{{ config('vibe.uploader.dropzone_cdn', 'https://unpkg.com/dropzone@5/dist/min/dropzone.min.css') }}">
        <script src="{{ config('vibe.uploader.dropzone_js_cdn', 'https://unpkg.com/dropzone@5/dist/min/dropzone.min.js') }}"></script>
    {% endif %}
    <style>
        .dropzone {
            border: 2px dashed #ccc;
            border-radius: 0.5rem;
            background: #f8fafc;
            min-height: 200px;
        }
        .dropzone .dz-message {
            margin: 3em 0;
        }
    </style>
{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="mb-6">
        <h1 class="text-2xl font-bold mb-2">Ajouter un média</h1>
        <a href="{{ route('media.index') }}" class="text-blue-600 hover:underline">
            &larr; Retour à la liste des médias
        </a>
    </div>

    <div class="bg-white rounded-lg shadow-md p-6">
        <div id="upload-container">
            {% if config('vibe.uploader.use_dropzone', true) %}
                <form action="{{ route('media.store') }}" class="dropzone" id="media-dropzone">
                    <div class="dz-message">
                        <div class="text-lg mb-2">Déposez les fichiers ici ou cliquez pour parcourir</div>
                        <div class="text-sm text-gray-500">
                            Taille maximale : {{ config('vibe.max_file_size', 100 * 1024 * 1024) / 1024 / 1024 }} MB
                        </div>
                    </div>
                </form>
            {% else %}
                <form action="{{ route('media.store') }}" method="post" enctype="multipart/form-data" class="space-y-4">
                    <div>
                        <label for="file" class="block text-sm font-medium text-gray-700 mb-1">Sélectionner un fichier</label>
                        <input type="file" id="file" name="file" class="block w-full text-sm text-gray-500
                            file:mr-4 file:py-2 file:px-4
                            file:rounded-md file:border-0
                            file:text-sm file:font-semibold
                            file:bg-blue-50 file:text-blue-700
                            hover:file:bg-blue-100
                        ">
                    </div>
                    <div>
                        <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                            Téléverser
                        </button>
                    </div>
                </form>
            {% endif %}

            <div id="upload-result" class="mt-6 hidden">
                <div class="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded relative" role="alert">
                    <p class="font-bold">Téléversement réussi !</p>
                    <p id="upload-filename"></p>
                    <div class="mt-2">
                        <a href="#" id="upload-link" class="text-green-700 font-semibold hover:underline" target="_blank">Voir le fichier</a>
                        <span class="mx-2">|</span>
                        <a href="{{ route('media.index') }}" class="text-blue-600 hover:underline">Retour à la liste</a>
                    </div>
                </div>
            </div>

            <div id="upload-error" class="mt-6 hidden">
                <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert">
                    <p class="font-bold">Erreur de téléversement</p>
                    <p id="error-message"></p>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    {% if config('vibe.uploader.use_dropzone', true) %}
        Dropzone.autoDiscover = false;

        const myDropzone = new Dropzone("#media-dropzone", {
            paramName: "file",
            maxFilesize: {{ config('vibe.max_file_size', 100 * 1024 * 1024) / 1024 / 1024 }},
            maxFiles: 1,
            acceptedFiles: "{{ config('vibe.allowed_extensions', '') }}",
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            },
            init: function() {
                this.on("success", function(file, response) {
                    document.getElementById('upload-filename').textContent = response.name;
                    const linkElement = document.getElementById('upload-link');
                    linkElement.href = response.url;
                    document.getElementById('upload-result').classList.remove('hidden');
                });

                this.on("error", function(file, errorMessage) {
                    let errorText = errorMessage;
                    if (typeof errorMessage === 'object' && errorMessage.error) {
                        errorText = errorMessage.error;
                    }
                    document.getElementById('error-message').textContent = errorText;
                    document.getElementById('upload-error').classList.remove('hidden');
                });
            }
        });
    {% else %}
        const form = document.querySelector('form');
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(form);
            
            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('upload-filename').textContent = data.name;
                    const linkElement = document.getElementById('upload-link');
                    linkElement.href = data.url;
                    document.getElementById('upload-result').classList.remove('hidden');
                } else {
                    document.getElementById('error-message').textContent = data.error || 'Une erreur s\'est produite';
                    document.getElementById('upload-error').classList.remove('hidden');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('error-message').textContent = 'Une erreur s\'est produite lors du téléversement';
                document.getElementById('upload-error').classList.remove('hidden');
            });
        });
    {% endif %}
});
</script>
{% endblock %} 